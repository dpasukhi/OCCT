name: Build and Test OCCT

on:
  pull_request:
    branches:
      - '**'

jobs:
  prepare-and-build-windows-x64:
    name: Prepare and Build on Windows with MSVC (x64)
    runs-on: windows-2022
    concurrency:
      group: ${{ github.workflow }}-build-windows-msvc-x64-${{ github.event.pull_request.number }}
      cancel-in-progress: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.7

    - name: Set up MSVC
      uses: ilammy/msvc-dev-cmd@v1.13.0
      with:
        arch: x64

    - name: Download and extract 3rdparty dependencies
      run: |
          Invoke-WebRequest -Uri https://github.com/Open-Cascade-SAS/OCCT/releases/download/V7_8_0/3rdparty-vc14-64.zip -OutFile 3rdparty-vc14-64.zip
          Expand-Archive -Path 3rdparty-vc14-64.zip -DestinationPath .
          Remove-Item 3rdparty-vc14-64.zip
      shell: pwsh

    - name: Configure OCCT
      run: |
          mkdir build
          cd build
          cmake -T host=x64 -D USE_FREETYPE=OFF -D USE_TK=OFF -D BUILD_USE_PCH=ON -D BUILD_OPT_PROFILE=Production -D BUILD_INCLUDE_SYMLINK=ON -D CMAKE_BUILD_TYPE=Release -D 3RDPARTY_DIR=${{ github.workspace }}/3rdparty-vc14-64 ..
  
    - name: Build OCCT
      run: |
          cd build
          cmake --build . --config Release -- /m

  prepare-and-build-macos-x64:
    name: Prepare and Build on macOS with Clang (x64)
    runs-on: macos-15
    concurrency:
      group: ${{ github.workflow }}-build-macos-clang-x64-${{ github.event.pull_request.number }}
      cancel-in-progress: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.7

    - name: Install dependencies
      run: |
        brew update
        brew install tcl-tk tbb gl2ps xerces-c \
                     libxmu libxi libxft libxpm \
                     glew

    - name: Configure OCCT
      run: |
        mkdir -p build
        cd build
        cmake -G "Unix Makefiles" \
              -D CMAKE_C_COMPILER=clang \
              -D CMAKE_CXX_COMPILER=clang++ \
              -D USE_FREETYPE=OFF \
              -D BUILD_USE_PCH=ON \
              -D BUILD_INCLUDE_SYMLINK=ON \
              -D CMAKE_BUILD_TYPE=Release ..

    - name: Build OCCT
      run: |
        cd build
        make -j$(sysctl -n hw.logicalcpu)

  prepare-and-build-linux-clang-x64:
    name: Prepare and Build on Ubuntu with Clang (x64)
    runs-on: ubuntu-24.04
    concurrency:
      group: ${{ github.workflow }}-build-linux-clang-x64-${{ github.event.pull_request.number }}
      cancel-in-progress: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.7

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y tcl-dev tk-dev cmake clang make libbtbb-dev libx11-dev libglu1-mesa-dev tcllib tcl-thread tcl

    - name: Configure OCCT
      run: |
        mkdir -p build
        cd build
        cmake -G "Unix Makefiles" \
              -D CMAKE_C_COMPILER=clang \
              -D CMAKE_CXX_COMPILER=clang++ \
              -D BUILD_USE_PCH=ON \
              -D BUILD_INCLUDE_SYMLINK=ON \
              -D BUILD_OPT_PROFILE=Production \
              -D USE_TK=OFF \
              -D USE_FREETYPE=OFF \
              -D CMAKE_BUILD_TYPE=Release ..

    - name: Build OCCT
      run: |
        cd build
        make -j"$(nproc)"

  prepare-and-build-linux-gcc-x64:
    name: Prepare and Build on Ubuntu with GCC (x64)
    runs-on: ubuntu-24.04
    concurrency:
      group: ${{ github.workflow }}-build-linux-gcc-x64-${{ github.event.pull_request.number }}
      cancel-in-progress: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.7

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y tcl-dev tk-dev cmake gcc g++ make libbtbb-dev libx11-dev libglu1-mesa-dev tcllib tcl-thread tcl

    - name: Configure OCCT
      run: |
        mkdir -p build
        cd build
        cmake -G "Unix Makefiles" \
              -D CMAKE_C_COMPILER=gcc \
              -D CMAKE_CXX_COMPILER=g++ \
              -D BUILD_USE_PCH=ON \
              -D BUILD_INCLUDE_SYMLINK=ON \
              -D BUILD_OPT_PROFILE=Production \
              -D USE_TK=OFF \
              -D USE_FREETYPE=OFF \
              -D CMAKE_BUILD_TYPE=Release ..

    - name: Build OCCT
      run: |
        cd build
        make -j"$(nproc)"

  test-windows-x64:
    name: Test on Windows (x64)
    runs-on: windows-2022
    needs: prepare-and-build-windows-x64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.7

    - name: Download and extract test data
      run: |
        cd data
        Invoke-WebRequest -Uri https://github.com/Open-Cascade-SAS/OCCT/releases/download/V7_8_0/opencascade-dataset-7.8.0.zip -OutFile opencascade-dataset-7.8.0.zip
        Expand-Archive -Path opencascade-dataset-7.8.0.zip -DestinationPath .
        Remove-Item opencascade-dataset-7.8.0.zip
      shell: pwsh

    - name: Run tests
      run: |
        cd build
        call env.bat vc14 win64 release
        DRAWEXE.exe -v -c testgrid
      shell: cmd

    - name: Upload test results
      uses: actions/upload-artifact@v4.4.3
      id: artifact-upload-step
      with:
        name: results-windows-x64
        path: build/results
        retention-days: 7

  test-macos-x64:
    name: Test on macOS (x64)
    runs-on: macos-15
    needs: prepare-and-build-macos-x64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.7

    - name: Install dependencies for headless OpenGL
      run: |
        brew update
        brew install mesalib-glw

    - name: Download test data
      run: |
        cd data
        curl -L -O https://github.com/Open-Cascade-SAS/OCCT/releases/download/V7_8_0/opencascade-dataset-7.8.0.tar.xz
        tar -xf opencascade-dataset-7.8.0.tar.xz

    - name: Set LIBGL_ALWAYS_SOFTWARE environment variable
      run: echo "LIBGL_ALWAYS_SOFTWARE=1" >> $GITHUB_ENV

    - name: Run tests
      run: |
         cd build
         source env.sh
         DRAWEXE -v -c testgrid
      env:
        LIBGL_ALWAYS_SOFTWARE: 1

    - name: Upload test results
      uses: actions/upload-artifact@v4.4.3
      id: artifact-upload-step
      with:
        name: results-macos-x64
        path: build/results
        retention-days: 7

  test-linux-clang-x64:
    name: Test on Linux with Clang (x64)
    runs-on: ubuntu-24.04
    needs: prepare-and-build-linux-clang-x64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.7

    - name: Download test data
      run: |
        cd data
        wget https://github.com/Open-Cascade-SAS/OCCT/releases/download/V7_8_0/opencascade-dataset-7.8.0.tar.xz
        tar -xf opencascade-dataset-7.8.0.tar.xz

    - name: Install Xvfb and Mesa
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb mesa-utils libgl1-mesa-dri

    - name: Start Xvfb
      run: Xvfb :99 -screen 0 1920x1080x24 &

    - name: Set DISPLAY environment variable
      run: echo "DISPLAY=:99" >> $GITHUB_ENV

    - name: Set LIBGL_ALWAYS_SOFTWARE environment variable
      run: echo "LIBGL_ALWAYS_SOFTWARE=1" >> $GITHUB_ENV

    - name: Run tests
      run: |
         cd build
         source env.sh
         DRAWEXE -v -c testgrid
      env:
        DISPLAY: :99
        LIBGL_ALWAYS_SOFTWARE: 1

    - name: Upload test results
      uses: actions/upload-artifact@v4.4.3
      id: artifact-upload-step
      with:
        name: results-linux-clang-x64
        path: build/results
        retention-days: 7

  test-linux-gcc-x64:
    name: Test on Linux with GCC (x64)
    runs-on: ubuntu-24.04
    needs: prepare-and-build-linux-gcc-x64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.7

    - name: Download test data
      run: |
        cd data
        wget https://github.com/Open-Cascade-SAS/OCCT/releases/download/V7_8_0/opencascade-dataset-7.8.0.tar.xz
        tar -xf opencascade-dataset-7.8.0.tar.xz

    - name: Install Xvfb and Mesa
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb mesa-utils libgl1-mesa-dri

    - name: Start Xvfb
      run: Xvfb :99 -screen 0 1920x1080x24 &

    - name: Set DISPLAY environment variable
      run: echo "DISPLAY=:99" >> $GITHUB_ENV

    - name: Set LIBGL_ALWAYS_SOFTWARE environment variable
      run: echo "LIBGL_ALWAYS_SOFTWARE=1" >> $GITHUB_ENV

    - name: Run tests
      run: |
         cd build
         source env.sh
         DRAWEXE -v -c testgrid
      env:
        DISPLAY: :99
        LIBGL_ALWAYS_SOFTWARE: 1

    - name: Upload test results
      uses: actions/upload-artifact@v4.4.3
      id: artifact-upload-step
      with:
        name: results-linux-gcc-x64
        path: build/results
        retention-days: 7

  summarize:
    name: Summarize and Send PR Message
    runs-on: ubuntu-24.04
    needs: [test-windows-x64, test-macos-x64, test-linux-clang-x64, test-linux-gcc-x64]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.7

    - name: Download all test results (Windows x64)
      uses: actions/download-artifact@v4.1.0
      with:
        name: results-windows-x64
        path: results/windows-x64

    - name: Download all test results (macOS x64)
      uses: actions/download-artifact@v4.1.0
      with:
        name: results-macos-x64
        path: results/macos-x64

    - name: Download all test results (Linux Clang x64)
      uses: actions/download-artifact@v4.1.0
      with:
        name: results-linux-clang-x64
        path: results/linux-clang-x64

    - name: Download all test results (Linux GCC x64)
      uses: actions/download-artifact@v4.1.0
      with:
        name: results-linux-gcc-x64
        path: results/linux-gcc-x64

    - name: Summarize results
      run: |
        echo "Summarizing results..."

    - name: Send PR message
      run: |
        echo "Sending PR message..."